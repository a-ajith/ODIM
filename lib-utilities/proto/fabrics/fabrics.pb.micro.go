// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: fabrics.proto

package fabrics

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Fabrics service

type FabricsService interface {
	GetFabricResource(ctx context.Context, in *FabricRequest, opts ...client.CallOption) (*FabricResponse, error)
	UpdateFabricResource(ctx context.Context, in *FabricRequest, opts ...client.CallOption) (*FabricResponse, error)
	AddFabric(ctx context.Context, in *AddFabricRequest, opts ...client.CallOption) (*FabricResponse, error)
	DeleteFabricResource(ctx context.Context, in *FabricRequest, opts ...client.CallOption) (*FabricResponse, error)
}

type fabricsService struct {
	c    client.Client
	name string
}

func NewFabricsService(name string, c client.Client) FabricsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "fabrics"
	}
	return &fabricsService{
		c:    c,
		name: name,
	}
}

func (c *fabricsService) GetFabricResource(ctx context.Context, in *FabricRequest, opts ...client.CallOption) (*FabricResponse, error) {
	req := c.c.NewRequest(c.name, "Fabrics.GetFabricResource", in)
	out := new(FabricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricsService) UpdateFabricResource(ctx context.Context, in *FabricRequest, opts ...client.CallOption) (*FabricResponse, error) {
	req := c.c.NewRequest(c.name, "Fabrics.UpdateFabricResource", in)
	out := new(FabricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricsService) AddFabric(ctx context.Context, in *AddFabricRequest, opts ...client.CallOption) (*FabricResponse, error) {
	req := c.c.NewRequest(c.name, "Fabrics.AddFabric", in)
	out := new(FabricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricsService) DeleteFabricResource(ctx context.Context, in *FabricRequest, opts ...client.CallOption) (*FabricResponse, error) {
	req := c.c.NewRequest(c.name, "Fabrics.DeleteFabricResource", in)
	out := new(FabricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fabrics service

type FabricsHandler interface {
	GetFabricResource(context.Context, *FabricRequest, *FabricResponse) error
	UpdateFabricResource(context.Context, *FabricRequest, *FabricResponse) error
	AddFabric(context.Context, *AddFabricRequest, *FabricResponse) error
	DeleteFabricResource(context.Context, *FabricRequest, *FabricResponse) error
}

func RegisterFabricsHandler(s server.Server, hdlr FabricsHandler, opts ...server.HandlerOption) error {
	type fabrics interface {
		GetFabricResource(ctx context.Context, in *FabricRequest, out *FabricResponse) error
		UpdateFabricResource(ctx context.Context, in *FabricRequest, out *FabricResponse) error
		AddFabric(ctx context.Context, in *AddFabricRequest, out *FabricResponse) error
		DeleteFabricResource(ctx context.Context, in *FabricRequest, out *FabricResponse) error
	}
	type Fabrics struct {
		fabrics
	}
	h := &fabricsHandler{hdlr}
	return s.Handle(s.NewHandler(&Fabrics{h}, opts...))
}

type fabricsHandler struct {
	FabricsHandler
}

func (h *fabricsHandler) GetFabricResource(ctx context.Context, in *FabricRequest, out *FabricResponse) error {
	return h.FabricsHandler.GetFabricResource(ctx, in, out)
}

func (h *fabricsHandler) UpdateFabricResource(ctx context.Context, in *FabricRequest, out *FabricResponse) error {
	return h.FabricsHandler.UpdateFabricResource(ctx, in, out)
}

func (h *fabricsHandler) AddFabric(ctx context.Context, in *AddFabricRequest, out *FabricResponse) error {
	return h.FabricsHandler.AddFabric(ctx, in, out)
}

func (h *fabricsHandler) DeleteFabricResource(ctx context.Context, in *FabricRequest, out *FabricResponse) error {
	return h.FabricsHandler.DeleteFabricResource(ctx, in, out)
}
