// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: session.proto

package session

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Session service

func NewSessionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Session service

type SessionService interface {
	CreateSession(ctx context.Context, in *SessionCreateRequest, opts ...client.CallOption) (*SessionCreateResponse, error)
	DeleteSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	GetAllActiveSessions(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	GetSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
	GetSessionUserName(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionUserName, error)
	GetSessionService(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
}

type sessionService struct {
	c    client.Client
	name string
}

func NewSessionService(name string, c client.Client) SessionService {
	return &sessionService{
		c:    c,
		name: name,
	}
}

func (c *sessionService) CreateSession(ctx context.Context, in *SessionCreateRequest, opts ...client.CallOption) (*SessionCreateResponse, error) {
	req := c.c.NewRequest(c.name, "Session.CreateSession", in)
	out := new(SessionCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionService) DeleteSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "Session.DeleteSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionService) GetAllActiveSessions(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "Session.GetAllActiveSessions", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionService) GetSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "Session.GetSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionService) GetSessionUserName(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionUserName, error) {
	req := c.c.NewRequest(c.name, "Session.GetSessionUserName", in)
	out := new(SessionUserName)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionService) GetSessionService(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "Session.GetSessionService", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionHandler interface {
	CreateSession(context.Context, *SessionCreateRequest, *SessionCreateResponse) error
	DeleteSession(context.Context, *SessionRequest, *SessionResponse) error
	GetAllActiveSessions(context.Context, *SessionRequest, *SessionResponse) error
	GetSession(context.Context, *SessionRequest, *SessionResponse) error
	GetSessionUserName(context.Context, *SessionRequest, *SessionUserName) error
	GetSessionService(context.Context, *SessionRequest, *SessionResponse) error
}

func RegisterSessionHandler(s server.Server, hdlr SessionHandler, opts ...server.HandlerOption) error {
	type session interface {
		CreateSession(ctx context.Context, in *SessionCreateRequest, out *SessionCreateResponse) error
		DeleteSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		GetAllActiveSessions(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		GetSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
		GetSessionUserName(ctx context.Context, in *SessionRequest, out *SessionUserName) error
		GetSessionService(ctx context.Context, in *SessionRequest, out *SessionResponse) error
	}
	type Session struct {
		session
	}
	h := &sessionHandler{hdlr}
	return s.Handle(s.NewHandler(&Session{h}, opts...))
}

type sessionHandler struct {
	SessionHandler
}

func (h *sessionHandler) CreateSession(ctx context.Context, in *SessionCreateRequest, out *SessionCreateResponse) error {
	return h.SessionHandler.CreateSession(ctx, in, out)
}

func (h *sessionHandler) DeleteSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.SessionHandler.DeleteSession(ctx, in, out)
}

func (h *sessionHandler) GetAllActiveSessions(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.SessionHandler.GetAllActiveSessions(ctx, in, out)
}

func (h *sessionHandler) GetSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.SessionHandler.GetSession(ctx, in, out)
}

func (h *sessionHandler) GetSessionUserName(ctx context.Context, in *SessionRequest, out *SessionUserName) error {
	return h.SessionHandler.GetSessionUserName(ctx, in, out)
}

func (h *sessionHandler) GetSessionService(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.SessionHandler.GetSessionService(ctx, in, out)
}
