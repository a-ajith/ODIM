// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: events.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Events service

type EventsService interface {
	GetEventService(ctx context.Context, in *EventSubRequest, opts ...client.CallOption) (*EventSubResponse, error)
	SubmitTestEvent(ctx context.Context, in *EventSubRequest, opts ...client.CallOption) (*EventSubResponse, error)
	CreateEventSubscription(ctx context.Context, in *EventSubRequest, opts ...client.CallOption) (*EventSubResponse, error)
	GetEventSubscription(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventSubResponse, error)
	DeleteEventSubscription(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventSubResponse, error)
	CreateDefaultEventSubscription(ctx context.Context, in *DefaultEventSubRequest, opts ...client.CallOption) (*DefaultEventSubResponse, error)
	GetEventSubscriptionsCollection(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventSubResponse, error)
	SubsribeEMB(ctx context.Context, in *SubscribeEMBRequest, opts ...client.CallOption) (*SubscribeEMBResponse, error)
}

type eventsService struct {
	c    client.Client
	name string
}

func NewEventsService(name string, c client.Client) EventsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "events"
	}
	return &eventsService{
		c:    c,
		name: name,
	}
}

func (c *eventsService) GetEventService(ctx context.Context, in *EventSubRequest, opts ...client.CallOption) (*EventSubResponse, error) {
	req := c.c.NewRequest(c.name, "Events.GetEventService", in)
	out := new(EventSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsService) SubmitTestEvent(ctx context.Context, in *EventSubRequest, opts ...client.CallOption) (*EventSubResponse, error) {
	req := c.c.NewRequest(c.name, "Events.SubmitTestEvent", in)
	out := new(EventSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsService) CreateEventSubscription(ctx context.Context, in *EventSubRequest, opts ...client.CallOption) (*EventSubResponse, error) {
	req := c.c.NewRequest(c.name, "Events.CreateEventSubscription", in)
	out := new(EventSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsService) GetEventSubscription(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventSubResponse, error) {
	req := c.c.NewRequest(c.name, "Events.GetEventSubscription", in)
	out := new(EventSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsService) DeleteEventSubscription(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventSubResponse, error) {
	req := c.c.NewRequest(c.name, "Events.DeleteEventSubscription", in)
	out := new(EventSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsService) CreateDefaultEventSubscription(ctx context.Context, in *DefaultEventSubRequest, opts ...client.CallOption) (*DefaultEventSubResponse, error) {
	req := c.c.NewRequest(c.name, "Events.CreateDefaultEventSubscription", in)
	out := new(DefaultEventSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsService) GetEventSubscriptionsCollection(ctx context.Context, in *EventRequest, opts ...client.CallOption) (*EventSubResponse, error) {
	req := c.c.NewRequest(c.name, "Events.GetEventSubscriptionsCollection", in)
	out := new(EventSubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsService) SubsribeEMB(ctx context.Context, in *SubscribeEMBRequest, opts ...client.CallOption) (*SubscribeEMBResponse, error) {
	req := c.c.NewRequest(c.name, "Events.SubsribeEMB", in)
	out := new(SubscribeEMBResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Events service

type EventsHandler interface {
	GetEventService(context.Context, *EventSubRequest, *EventSubResponse) error
	SubmitTestEvent(context.Context, *EventSubRequest, *EventSubResponse) error
	CreateEventSubscription(context.Context, *EventSubRequest, *EventSubResponse) error
	GetEventSubscription(context.Context, *EventRequest, *EventSubResponse) error
	DeleteEventSubscription(context.Context, *EventRequest, *EventSubResponse) error
	CreateDefaultEventSubscription(context.Context, *DefaultEventSubRequest, *DefaultEventSubResponse) error
	GetEventSubscriptionsCollection(context.Context, *EventRequest, *EventSubResponse) error
	SubsribeEMB(context.Context, *SubscribeEMBRequest, *SubscribeEMBResponse) error
}

func RegisterEventsHandler(s server.Server, hdlr EventsHandler, opts ...server.HandlerOption) error {
	type events interface {
		GetEventService(ctx context.Context, in *EventSubRequest, out *EventSubResponse) error
		SubmitTestEvent(ctx context.Context, in *EventSubRequest, out *EventSubResponse) error
		CreateEventSubscription(ctx context.Context, in *EventSubRequest, out *EventSubResponse) error
		GetEventSubscription(ctx context.Context, in *EventRequest, out *EventSubResponse) error
		DeleteEventSubscription(ctx context.Context, in *EventRequest, out *EventSubResponse) error
		CreateDefaultEventSubscription(ctx context.Context, in *DefaultEventSubRequest, out *DefaultEventSubResponse) error
		GetEventSubscriptionsCollection(ctx context.Context, in *EventRequest, out *EventSubResponse) error
		SubsribeEMB(ctx context.Context, in *SubscribeEMBRequest, out *SubscribeEMBResponse) error
	}
	type Events struct {
		events
	}
	h := &eventsHandler{hdlr}
	return s.Handle(s.NewHandler(&Events{h}, opts...))
}

type eventsHandler struct {
	EventsHandler
}

func (h *eventsHandler) GetEventService(ctx context.Context, in *EventSubRequest, out *EventSubResponse) error {
	return h.EventsHandler.GetEventService(ctx, in, out)
}

func (h *eventsHandler) SubmitTestEvent(ctx context.Context, in *EventSubRequest, out *EventSubResponse) error {
	return h.EventsHandler.SubmitTestEvent(ctx, in, out)
}

func (h *eventsHandler) CreateEventSubscription(ctx context.Context, in *EventSubRequest, out *EventSubResponse) error {
	return h.EventsHandler.CreateEventSubscription(ctx, in, out)
}

func (h *eventsHandler) GetEventSubscription(ctx context.Context, in *EventRequest, out *EventSubResponse) error {
	return h.EventsHandler.GetEventSubscription(ctx, in, out)
}

func (h *eventsHandler) DeleteEventSubscription(ctx context.Context, in *EventRequest, out *EventSubResponse) error {
	return h.EventsHandler.DeleteEventSubscription(ctx, in, out)
}

func (h *eventsHandler) CreateDefaultEventSubscription(ctx context.Context, in *DefaultEventSubRequest, out *DefaultEventSubResponse) error {
	return h.EventsHandler.CreateDefaultEventSubscription(ctx, in, out)
}

func (h *eventsHandler) GetEventSubscriptionsCollection(ctx context.Context, in *EventRequest, out *EventSubResponse) error {
	return h.EventsHandler.GetEventSubscriptionsCollection(ctx, in, out)
}

func (h *eventsHandler) SubsribeEMB(ctx context.Context, in *SubscribeEMBRequest, out *SubscribeEMBResponse) error {
	return h.EventsHandler.SubsribeEMB(ctx, in, out)
}
