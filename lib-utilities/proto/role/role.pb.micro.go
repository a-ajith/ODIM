// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: role.proto

package role

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Roles service

type RolesService interface {
	CreateRole(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*RoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*RoleResponse, error)
	GetAllRoles(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*RoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*RoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*RoleResponse, error)
}

type rolesService struct {
	c    client.Client
	name string
}

func NewRolesService(name string, c client.Client) RolesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "role"
	}
	return &rolesService{
		c:    c,
		name: name,
	}
}

func (c *rolesService) CreateRole(ctx context.Context, in *RoleRequest, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "Roles.CreateRole", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesService) GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "Roles.GetRole", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesService) GetAllRoles(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "Roles.GetAllRoles", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "Roles.DeleteRole", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesService) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "Roles.UpdateRole", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Roles service

type RolesHandler interface {
	CreateRole(context.Context, *RoleRequest, *RoleResponse) error
	GetRole(context.Context, *GetRoleRequest, *RoleResponse) error
	GetAllRoles(context.Context, *GetRoleRequest, *RoleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *RoleResponse) error
	UpdateRole(context.Context, *UpdateRoleRequest, *RoleResponse) error
}

func RegisterRolesHandler(s server.Server, hdlr RolesHandler, opts ...server.HandlerOption) error {
	type roles interface {
		CreateRole(ctx context.Context, in *RoleRequest, out *RoleResponse) error
		GetRole(ctx context.Context, in *GetRoleRequest, out *RoleResponse) error
		GetAllRoles(ctx context.Context, in *GetRoleRequest, out *RoleResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *RoleResponse) error
		UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *RoleResponse) error
	}
	type Roles struct {
		roles
	}
	h := &rolesHandler{hdlr}
	return s.Handle(s.NewHandler(&Roles{h}, opts...))
}

type rolesHandler struct {
	RolesHandler
}

func (h *rolesHandler) CreateRole(ctx context.Context, in *RoleRequest, out *RoleResponse) error {
	return h.RolesHandler.CreateRole(ctx, in, out)
}

func (h *rolesHandler) GetRole(ctx context.Context, in *GetRoleRequest, out *RoleResponse) error {
	return h.RolesHandler.GetRole(ctx, in, out)
}

func (h *rolesHandler) GetAllRoles(ctx context.Context, in *GetRoleRequest, out *RoleResponse) error {
	return h.RolesHandler.GetAllRoles(ctx, in, out)
}

func (h *rolesHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *RoleResponse) error {
	return h.RolesHandler.DeleteRole(ctx, in, out)
}

func (h *rolesHandler) UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *RoleResponse) error {
	return h.RolesHandler.UpdateRole(ctx, in, out)
}
