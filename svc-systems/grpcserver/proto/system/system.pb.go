// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system.proto

package system

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SystemRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemRequest) Reset()         { *m = SystemRequest{} }
func (m *SystemRequest) String() string { return proto.CompactTextString(m) }
func (*SystemRequest) ProtoMessage()    {}
func (*SystemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{0}
}

func (m *SystemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemRequest.Unmarshal(m, b)
}
func (m *SystemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemRequest.Marshal(b, m, deterministic)
}
func (m *SystemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemRequest.Merge(m, src)
}
func (m *SystemRequest) XXX_Size() int {
	return xxx_messageInfo_SystemRequest.Size(m)
}
func (m *SystemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SystemRequest proto.InternalMessageInfo

func (m *SystemRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type SystemResponse struct {
	StatusCode           int32    `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemResponse) Reset()         { *m = SystemResponse{} }
func (m *SystemResponse) String() string { return proto.CompactTextString(m) }
func (*SystemResponse) ProtoMessage()    {}
func (*SystemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{1}
}

func (m *SystemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemResponse.Unmarshal(m, b)
}
func (m *SystemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemResponse.Marshal(b, m, deterministic)
}
func (m *SystemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemResponse.Merge(m, src)
}
func (m *SystemResponse) XXX_Size() int {
	return xxx_messageInfo_SystemResponse.Size(m)
}
func (m *SystemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemResponse proto.InternalMessageInfo

func (m *SystemResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func init() {
	proto.RegisterType((*SystemRequest)(nil), "SystemRequest")
	proto.RegisterType((*SystemResponse)(nil), "SystemResponse")
}

func init() { proto.RegisterFile("system.proto", fileDescriptor_86a7260ebdc12f47) }

var fileDescriptor_86a7260ebdc12f47 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xae, 0x2c, 0x2e,
	0x49, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe7, 0xe2, 0x0d, 0x06, 0xf3, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x3c, 0x5d, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x98, 0x3c, 0x5d, 0x94, 0x0c, 0xb8, 0xf8, 0x60, 0x0a, 0x8a, 0x0b, 0xf2, 0xf3,
	0x8a, 0x53, 0x85, 0xe4, 0xb8, 0xb8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x9d, 0xf3, 0x53, 0x52,
	0xc1, 0x2a, 0x59, 0x83, 0x90, 0x44, 0x8c, 0x2c, 0xb8, 0xd8, 0x20, 0x3a, 0x84, 0xf4, 0xb8, 0x38,
	0xdd, 0x53, 0x4b, 0xa0, 0x1c, 0x3e, 0x3d, 0x14, 0x8b, 0xa4, 0xf8, 0xf5, 0x50, 0xcd, 0x55, 0x62,
	0x48, 0x62, 0x03, 0xbb, 0xc9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xaf, 0x24, 0xb1, 0xa3,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemClient interface {
	GetSystem(ctx context.Context, in *SystemRequest, opts ...grpc.CallOption) (*SystemResponse, error)
}

type systemClient struct {
	cc *grpc.ClientConn
}

func NewSystemClient(cc *grpc.ClientConn) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) GetSystem(ctx context.Context, in *SystemRequest, opts ...grpc.CallOption) (*SystemResponse, error) {
	out := new(SystemResponse)
	err := c.cc.Invoke(ctx, "/System/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
type SystemServer interface {
	GetSystem(context.Context, *SystemRequest) (*SystemResponse, error)
}

// UnimplementedSystemServer can be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (*UnimplementedSystemServer) GetSystem(ctx context.Context, req *SystemRequest) (*SystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}

func RegisterSystemServer(s *grpc.Server, srv SystemServer) {
	s.RegisterService(&_System_serviceDesc, srv)
}

func _System_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/System/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetSystem(ctx, req.(*SystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _System_serviceDesc = grpc.ServiceDesc{
	ServiceName: "System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystem",
			Handler:    _System_GetSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
